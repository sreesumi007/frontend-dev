/* tslint:disable */
/* eslint-disable */
/**
 * MathGrass
 * This is the OpenAPI specification for MathGrass
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: andreas.domanowski@tu-dresden.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EdgeDTO } from './EdgeDTO';
import {
    EdgeDTOFromJSON,
    EdgeDTOFromJSONTyped,
    EdgeDTOToJSON,
} from './EdgeDTO';
import type { LabelDTO } from './LabelDTO';
import {
    LabelDTOFromJSON,
    LabelDTOFromJSONTyped,
    LabelDTOToJSON,
} from './LabelDTO';
import type { VertexDTO } from './VertexDTO';
import {
    VertexDTOFromJSON,
    VertexDTOFromJSONTyped,
    VertexDTOToJSON,
} from './VertexDTO';

/**
 * 
 * @export
 * @interface GraphDTO
 */
export interface GraphDTO {
    /**
     * 
     * @type {number}
     * @memberof GraphDTO
     */
    id: number;
    /**
     * 
     * @type {Array<LabelDTO>}
     * @memberof GraphDTO
     */
    labels?: Array<LabelDTO>;
    /**
     * 
     * @type {Array<EdgeDTO>}
     * @memberof GraphDTO
     */
    edges: Array<EdgeDTO>;
    /**
     * 
     * @type {Array<VertexDTO>}
     * @memberof GraphDTO
     */
    vertices: Array<VertexDTO>;
}

/**
 * Check if a given object implements the GraphDTO interface.
 */
export function instanceOfGraphDTO(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "edges" in value;
    isInstance = isInstance && "vertices" in value;

    return isInstance;
}

export function GraphDTOFromJSON(json: any): GraphDTO {
    return GraphDTOFromJSONTyped(json, false);
}

export function GraphDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): GraphDTO {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'labels': !exists(json, 'labels') ? undefined : ((json['labels'] as Array<any>).map(LabelDTOFromJSON)),
        'edges': ((json['edges'] as Array<any>).map(EdgeDTOFromJSON)),
        'vertices': ((json['vertices'] as Array<any>).map(VertexDTOFromJSON)),
    };
}

export function GraphDTOToJSON(value?: GraphDTO | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'labels': value.labels === undefined ? undefined : ((value.labels as Array<any>).map(LabelDTOToJSON)),
        'edges': ((value.edges as Array<any>).map(EdgeDTOToJSON)),
        'vertices': ((value.vertices as Array<any>).map(VertexDTOToJSON)),
    };
}

