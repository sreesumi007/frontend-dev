/* tslint:disable */
/* eslint-disable */
/**
 * MathGrass
 * This is the OpenAPI specification for MathGrass
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: andreas.domanowski@tu-dresden.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  EvaluateAnswer200Response,
  EvaluateAnswerRequest,
  GraphDTO,
  HintDTO,
  LabelDTO,
  TaskCollectionDTO,
  TaskDTO,
  TaskIdLabelTupleDTO,
} from "../models";
import {
  EvaluateAnswer200ResponseFromJSON,
  EvaluateAnswer200ResponseToJSON,
  EvaluateAnswerRequestFromJSON,
  EvaluateAnswerRequestToJSON,
  GraphDTOFromJSON,
  GraphDTOToJSON,
  HintDTOFromJSON,
  HintDTOToJSON,
  LabelDTOFromJSON,
  LabelDTOToJSON,
  TaskCollectionDTOFromJSON,
  TaskCollectionDTOToJSON,
  TaskDTOFromJSON,
  TaskDTOToJSON,
  TaskIdLabelTupleDTOFromJSON,
  TaskIdLabelTupleDTOToJSON,
} from "../models";

export interface AddTaskHintRequest {
  taskId: number;
  hint: HintDTO;
}

export interface CreateGraphRequest {
  graph: GraphDTO;
}

export interface CreateLabelRequest {
  label: LabelDTO;
}

export interface CreateTaskRequest {
  task: TaskDTO;
}

export interface CreateTaskCollectionRequest {
  taskCollection: TaskCollectionDTO;
}

export interface EvaluateAnswerOperationRequest {
  taskId: number;
  evaluateAnswerRequest: EvaluateAnswerRequest;
}

export interface GetGraphByIdRequest {
  graphId: number;
}

export interface GetHintForTaskRequest {
  taskId: number;
  hintLevel: number;
}

export interface GetLabelByIdRequest {
  labelId: number;
}

export interface GetTaskByIdRequest {
  taskId: number;
}

export interface GetTaskCollectionByIdRequest {
  taskCollectionId: number;
}

export interface UpdateGraphRequest {
  graphId: number;
  graph: GraphDTO;
}

export interface UpdateTaskRequest {
  taskId: number;
  task: TaskDTO;
}

/**
 *
 */
export class DefaultApi extends runtime.BaseAPI {
  /**
   * Adds a hint to a task
   */
  async addTaskHintRaw(
    requestParameters: AddTaskHintRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.taskId === null ||
      requestParameters.taskId === undefined
    ) {
      throw new runtime.RequiredError(
        "taskId",
        "Required parameter requestParameters.taskId was null or undefined when calling addTaskHint."
      );
    }

    if (
      requestParameters.hint === null ||
      requestParameters.hint === undefined
    ) {
      throw new runtime.RequiredError(
        "hint",
        "Required parameter requestParameters.hint was null or undefined when calling addTaskHint."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/task/{taskId}/addHint`.replace(
          `{${"taskId"}}`,
          encodeURIComponent(String(requestParameters.taskId))
        ),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: HintDTOToJSON(requestParameters.hint),
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Adds a hint to a task
   */
  async addTaskHint(
    requestParameters: AddTaskHintRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.addTaskHintRaw(requestParameters, initOverrides);
  }

  /**
   * Create a new graph
   */
  async createGraphRaw(
    requestParameters: CreateGraphRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<number>> {
    if (
      requestParameters.graph === null ||
      requestParameters.graph === undefined
    ) {
      throw new runtime.RequiredError(
        "graph",
        "Required parameter requestParameters.graph was null or undefined when calling createGraph."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/graph`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: GraphDTOToJSON(requestParameters.graph),
      },
      initOverrides
    );

    return new runtime.TextApiResponse(response) as any;
  }

  /**
   * Create a new graph
   */
  async createGraph(
    requestParameters: CreateGraphRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<number> {
    const response = await this.createGraphRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Creates a label
   */
  async createLabelRaw(
    requestParameters: CreateLabelRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<LabelDTO>> {
    if (
      requestParameters.label === null ||
      requestParameters.label === undefined
    ) {
      throw new runtime.RequiredError(
        "label",
        "Required parameter requestParameters.label was null or undefined when calling createLabel."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/label`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: LabelDTOToJSON(requestParameters.label),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      LabelDTOFromJSON(jsonValue)
    );
  }

  /**
   * Creates a label
   */
  async createLabel(
    requestParameters: CreateLabelRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<LabelDTO> {
    const response = await this.createLabelRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Creates a task
   */
  async createTaskRaw(
    requestParameters: CreateTaskRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<number>> {
    if (
      requestParameters.task === null ||
      requestParameters.task === undefined
    ) {
      throw new runtime.RequiredError(
        "task",
        "Required parameter requestParameters.task was null or undefined when calling createTask."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/task`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: TaskDTOToJSON(requestParameters.task),
      },
      initOverrides
    );

    return new runtime.TextApiResponse(response) as any;
  }

  /**
   * Creates a task
   */
  async createTask(
    requestParameters: CreateTaskRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<number> {
    const response = await this.createTaskRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Creates a task collection
   */
  async createTaskCollectionRaw(
    requestParameters: CreateTaskCollectionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<TaskCollectionDTO>> {
    if (
      requestParameters.taskCollection === null ||
      requestParameters.taskCollection === undefined
    ) {
      throw new runtime.RequiredError(
        "taskCollection",
        "Required parameter requestParameters.taskCollection was null or undefined when calling createTaskCollection."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/taskCollection`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: TaskCollectionDTOToJSON(requestParameters.taskCollection),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      TaskCollectionDTOFromJSON(jsonValue)
    );
  }

  /**
   * Creates a task collection
   */
  async createTaskCollection(
    requestParameters: CreateTaskCollectionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<TaskCollectionDTO> {
    const response = await this.createTaskCollectionRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Submit an answer to a task and expect a boolean response
   */
  async evaluateAnswerRaw(
    requestParameters: EvaluateAnswerOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<EvaluateAnswer200Response>> {
    if (
      requestParameters.taskId === null ||
      requestParameters.taskId === undefined
    ) {
      throw new runtime.RequiredError(
        "taskId",
        "Required parameter requestParameters.taskId was null or undefined when calling evaluateAnswer."
      );
    }

    if (
      requestParameters.evaluateAnswerRequest === null ||
      requestParameters.evaluateAnswerRequest === undefined
    ) {
      throw new runtime.RequiredError(
        "evaluateAnswerRequest",
        "Required parameter requestParameters.evaluateAnswerRequest was null or undefined when calling evaluateAnswer."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/task/{taskId}/evaluateAnswer`.replace(
          `{${"taskId"}}`,
          encodeURIComponent(String(requestParameters.taskId))
        ),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: EvaluateAnswerRequestToJSON(
          requestParameters.evaluateAnswerRequest
        ),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      EvaluateAnswer200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Submit an answer to a task and expect a boolean response
   */
  async evaluateAnswer(
    requestParameters: EvaluateAnswerOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<EvaluateAnswer200Response> {
    const response = await this.evaluateAnswerRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get a graph by id
   */
  async getGraphByIdRaw(
    requestParameters: GetGraphByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<GraphDTO>> {
    if (
      requestParameters.graphId === null ||
      requestParameters.graphId === undefined
    ) {
      throw new runtime.RequiredError(
        "graphId",
        "Required parameter requestParameters.graphId was null or undefined when calling getGraphById."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/graph/{graphId}`.replace(
          `{${"graphId"}}`,
          encodeURIComponent(String(requestParameters.graphId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GraphDTOFromJSON(jsonValue)
    );
  }

  /**
   * Get a graph by id
   */
  async getGraphById(
    requestParameters: GetGraphByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<GraphDTO> {
    const response = await this.getGraphByIdRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get hint at hintlevel for task
   */
  async getHintForTaskRaw(
    requestParameters: GetHintForTaskRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<HintDTO>> {
    if (
      requestParameters.taskId === null ||
      requestParameters.taskId === undefined
    ) {
      throw new runtime.RequiredError(
        "taskId",
        "Required parameter requestParameters.taskId was null or undefined when calling getHintForTask."
      );
    }

    if (
      requestParameters.hintLevel === null ||
      requestParameters.hintLevel === undefined
    ) {
      throw new runtime.RequiredError(
        "hintLevel",
        "Required parameter requestParameters.hintLevel was null or undefined when calling getHintForTask."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/task/{taskId}/hint/{hintLevel}`
          .replace(
            `{${"taskId"}}`,
            encodeURIComponent(String(requestParameters.taskId))
          )
          .replace(
            `{${"hintLevel"}}`,
            encodeURIComponent(String(requestParameters.hintLevel))
          ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      HintDTOFromJSON(jsonValue)
    );
  }

  /**
   * Get hint at hintlevel for task
   */
  async getHintForTask(
    requestParameters: GetHintForTaskRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<HintDTO> {
    const response = await this.getHintForTaskRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get the IDs of all tasks
   */
  async getIdsOfAllTasksRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<TaskIdLabelTupleDTO>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/task`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(TaskIdLabelTupleDTOFromJSON)
    );
  }

  /**
   * Get the IDs of all tasks
   */
  async getIdsOfAllTasks(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<TaskIdLabelTupleDTO>> {
    const response = await this.getIdsOfAllTasksRaw(initOverrides);
    return await response.value();
  }

  /**
   * Returns a label
   */
  async getLabelByIdRaw(
    requestParameters: GetLabelByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<LabelDTO>> {
    if (
      requestParameters.labelId === null ||
      requestParameters.labelId === undefined
    ) {
      throw new runtime.RequiredError(
        "labelId",
        "Required parameter requestParameters.labelId was null or undefined when calling getLabelById."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/label/{labelId}`.replace(
          `{${"labelId"}}`,
          encodeURIComponent(String(requestParameters.labelId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      LabelDTOFromJSON(jsonValue)
    );
  }

  /**
   * Returns a label
   */
  async getLabelById(
    requestParameters: GetLabelByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<LabelDTO> {
    const response = await this.getLabelByIdRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get all labels
   */
  async getLabelsRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<LabelDTO>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/label`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(LabelDTOFromJSON)
    );
  }

  /**
   * Get all labels
   */
  async getLabels(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<LabelDTO>> {
    const response = await this.getLabelsRaw(initOverrides);
    return await response.value();
  }

  /**
   * Returns a task
   */
  async getTaskByIdRaw(
    requestParameters: GetTaskByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<TaskDTO>> {
    if (
      requestParameters.taskId === null ||
      requestParameters.taskId === undefined
    ) {
      throw new runtime.RequiredError(
        "taskId",
        "Required parameter requestParameters.taskId was null or undefined when calling getTaskById."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/task/{taskId}`.replace(
          `{${"taskId"}}`,
          encodeURIComponent(String(requestParameters.taskId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      TaskDTOFromJSON(jsonValue)
    );
  }

  /**
   * Returns a task
   */
  async getTaskById(
    requestParameters: GetTaskByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<TaskDTO> {
    const response = await this.getTaskByIdRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Returns a task collection
   */
  async getTaskCollectionByIdRaw(
    requestParameters: GetTaskCollectionByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<TaskCollectionDTO>> {
    if (
      requestParameters.taskCollectionId === null ||
      requestParameters.taskCollectionId === undefined
    ) {
      throw new runtime.RequiredError(
        "taskCollectionId",
        "Required parameter requestParameters.taskCollectionId was null or undefined when calling getTaskCollectionById."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/taskCollection/{taskCollectionId}`.replace(
          `{${"taskCollectionId"}}`,
          encodeURIComponent(String(requestParameters.taskCollectionId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      TaskCollectionDTOFromJSON(jsonValue)
    );
  }

  /**
   * Returns a task collection
   */
  async getTaskCollectionById(
    requestParameters: GetTaskCollectionByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<TaskCollectionDTO> {
    const response = await this.getTaskCollectionByIdRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get all task collection
   */
  async getTaskCollectionsRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<TaskCollectionDTO>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/taskCollection`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(TaskCollectionDTOFromJSON)
    );
  }

  /**
   * Get all task collection
   */
  async getTaskCollections(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<TaskCollectionDTO>> {
    const response = await this.getTaskCollectionsRaw(initOverrides);
    return await response.value();
  }

  /**
   * Update a graph
   */
  async updateGraphRaw(
    requestParameters: UpdateGraphRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.graphId === null ||
      requestParameters.graphId === undefined
    ) {
      throw new runtime.RequiredError(
        "graphId",
        "Required parameter requestParameters.graphId was null or undefined when calling updateGraph."
      );
    }

    if (
      requestParameters.graph === null ||
      requestParameters.graph === undefined
    ) {
      throw new runtime.RequiredError(
        "graph",
        "Required parameter requestParameters.graph was null or undefined when calling updateGraph."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/graph/{graphId}`.replace(
          `{${"graphId"}}`,
          encodeURIComponent(String(requestParameters.graphId))
        ),
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: GraphDTOToJSON(requestParameters.graph),
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Update a graph
   */
  async updateGraph(
    requestParameters: UpdateGraphRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.updateGraphRaw(requestParameters, initOverrides);
  }

  /**
   * Updates a task
   */
  async updateTaskRaw(
    requestParameters: UpdateTaskRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.taskId === null ||
      requestParameters.taskId === undefined
    ) {
      throw new runtime.RequiredError(
        "taskId",
        "Required parameter requestParameters.taskId was null or undefined when calling updateTask."
      );
    }

    if (
      requestParameters.task === null ||
      requestParameters.task === undefined
    ) {
      throw new runtime.RequiredError(
        "task",
        "Required parameter requestParameters.task was null or undefined when calling updateTask."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/task/{taskId}`.replace(
          `{${"taskId"}}`,
          encodeURIComponent(String(requestParameters.taskId))
        ),
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: TaskDTOToJSON(requestParameters.task),
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Updates a task
   */
  async updateTask(
    requestParameters: UpdateTaskRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.updateTaskRaw(requestParameters, initOverrides);
  }
}
